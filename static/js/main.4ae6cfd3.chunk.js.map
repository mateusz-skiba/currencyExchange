{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["App","state","base","code","rate","exchange","inputValue","showList","document","querySelector","style","display","hideList","handleChangeBase","e","setState","target","textContent","dataset","handleChangeValue","value","fetch","then","response","ok","Error","json","data","rates","ask","catch","err","console","log","className","onMouseOver","this","onMouseLeave","onClick","map","currency","key","data-rate","type","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gPA+IeA,G,kNA3IXC,MAAQ,CACJC,KAAM,CACFC,KAAM,MACNC,KAAM,GAEVC,SAAU,CACN,CACIF,KAAM,MACNC,KAAM,KACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,IACP,CACCD,KAAM,MACNC,KAAM,KAGdE,WAAY,G,EAqDhBC,SAAW,WACPC,SAASC,cAAc,YAAYC,MAAMC,QAAU,S,EAGvDC,SAAW,WACPJ,SAASC,cAAc,YAAYC,MAAMC,QAAU,Q,EAGvDE,iBAAmB,SAAAC,GACf,EAAKC,SAAS,CACVb,KAAM,CACFC,KAAMW,EAAEE,OAAOC,YACfb,KAAMU,EAAEE,OAAOE,QAAQd,S,EAKnCe,kBAAoB,SAAAL,GAChB,EAAKC,SAAS,CAACT,WAAYQ,EAAEE,OAAOI,S,kEApEnB,IAAD,OAChBC,MAAM,iDAAiDC,MAAK,SAAAC,GACxD,GAAIA,EAASC,GACT,OAAOD,EAEX,MAAME,MAAM,YAEXH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACF,EAAKZ,SAAS,CACVV,SAAU,CACN,CACIF,KAAM,MACNC,KAAM,GACP,CACCD,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,KACxB,CACC1B,KAAM,MACNC,KAAMuB,EAAK,GAAGC,MAAM,GAAGC,WAKtCC,OAAM,SAAAC,GACHC,QAAQC,IAAI,iB,+BAyBd,IAAD,OACL,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,OACX,yBAAKC,YAAaC,KAAK7B,SAAU8B,aAAcD,KAAKxB,SAAUsB,UAAU,QACpE,gCAASE,KAAKnC,MAAMC,KAAKC,MACzB,wBAAImC,QAASF,KAAKxB,UACbwB,KAAKnC,MAAMI,SAASkC,KAAI,SAAAC,GAAQ,OAC7B,wBAAIC,IAAKD,EAASrC,KAAMuC,YAAWF,EAASpC,KAAMkC,QAAS,EAAKzB,kBAAmB2B,EAASrC,WAIxG,2BAAOwC,KAAK,SAASvB,MAAOgB,KAAKnC,MAAMK,WAAYsC,SAAUR,KAAKjB,qBAEtE,4BACKiB,KAAKnC,MAAMI,SAASkC,KAAI,SAAAC,GAAQ,OAC7B,wBAAIC,IAAKD,EAASrC,KAAMuC,YAAWF,EAASpC,KAAM8B,UAAU,SACxD,yBAAKA,UAAU,QAAQM,EAASrC,MAChC,yBAAK+B,UAAU,UAAU,EAAKjC,MAAMC,KAAKE,KAAO,EAAKH,MAAMK,WAAakC,EAASpC,gB,GAnI3FyC,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.4ae6cfd3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n    state = {\n        base: {\n            code: \"PLN\",\n            rate: 1,\n        },\n        exchange: [\n            {\n                code: \"PLN\",\n                rate: \"1\"\n            }, {\n                code: \"USD\",\n                rate: \"\"\n            }, {\n                code: \"AUD\",\n                rate: \"\"\n            }, {\n                code: \"CAD\",\n                rate: \"\"\n            }, {\n                code: \"EUR\",\n                rate: \"\"\n            }, {\n                code: \"HUF\",\n                rate: \"\"\n            }, {\n                code: \"CHF\",\n                rate: \"\"\n            }, {\n                code: \"GBO\",\n                rate: \"\"\n            }, {\n                code: \"JPY\",\n                rate: \"\"\n            }, {\n                code: \"CZK\",\n                rate: \"\"\n            }\n        ],\n        inputValue: 1\n    }\n\n    componentDidMount() {\n        fetch('http://api.nbp.pl/api/exchangerates/tables/C/').then(response => {\n            if (response.ok) {\n                return response\n            }\n            throw Error(\"Error\")\n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    exchange: [\n                        {\n                            code: \"PLN\",\n                            rate: 1\n                        }, {\n                            code: \"USD\",\n                            rate: data[0].rates[0].ask\n                        }, {\n                            code: \"AUD\",\n                            rate: data[0].rates[1].ask\n                        }, {\n                            code: \"CAD\",\n                            rate: data[0].rates[2].ask\n                        }, {\n                            code: \"EUR\",\n                            rate: data[0].rates[3].ask\n                        }, {\n                            code: \"HUF\",\n                            rate: data[0].rates[4].ask\n                        }, {\n                            code: \"CHF\",\n                            rate: data[0].rates[5].ask\n                        }, {\n                            code: \"GBO\",\n                            rate: data[0].rates[6].ask\n                        }, {\n                            code: \"JPY\",\n                            rate: data[0].rates[7].ask\n                        }, {\n                            code: \"CZK\",\n                            rate: data[0].rates[8].ask\n                        }\n                    ]\n                })\n            })\n            .catch(err => {\n                console.log(\"Not find\")\n            })\n    }\n\n    showList = () => {\n        document.querySelector(\".base ul\").style.display = \"block\";\n    }\n\n    hideList = () => {\n        document.querySelector(\".base ul\").style.display = \"none\";\n    }\n\n    handleChangeBase = e => {\n        this.setState({\n            base: {\n                code: e.target.textContent,\n                rate: e.target.dataset.rate,\n            }\n        })\n    }\n\n    handleChangeValue = e => {\n        this.setState({inputValue: e.target.value})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"set\">\n                    <div onMouseOver={this.showList} onMouseLeave={this.hideList} className=\"base\">\n                        <button>{this.state.base.code}</button>\n                        <ul onClick={this.hideList}>\n                            {this.state.exchange.map(currency => (\n                                <li key={currency.code} data-rate={currency.rate} onClick={this.handleChangeBase}>{currency.code}</li>\n                            ))}\n                        </ul>\n                    </div>\n                    <input type=\"number\" value={this.state.inputValue} onChange={this.handleChangeValue}/>\n                </div>\n                <ul>\n                    {this.state.exchange.map(currency => (\n                        <li key={currency.code} data-rate={currency.rate} className=\"panel\">\n                            <div className=\"rate\">{currency.code}</div>\n                            <div className=\"result\">{this.state.base.rate * this.state.inputValue / currency.rate}</div>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}